// Generated by gencpp from file pxrd_msgs/PxrdStatus.msg
// DO NOT EDIT!


#ifndef PXRD_MSGS_MESSAGE_PXRDSTATUS_H
#define PXRD_MSGS_MESSAGE_PXRDSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pxrd_msgs
{
template <class ContainerAllocator>
struct PxrdStatus_
{
  typedef PxrdStatus_<ContainerAllocator> Type;

  PxrdStatus_()
    : pxrd_status(0)  {
    }
  PxrdStatus_(const ContainerAllocator& _alloc)
    : pxrd_status(0)  {
  (void)_alloc;
    }



   typedef int32_t _pxrd_status_type;
  _pxrd_status_type pxrd_status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NOT_LAUNCHED_YET)
  #undef NOT_LAUNCHED_YET
#endif
#if defined(_WIN32) && defined(EXECUTION_DONE)
  #undef EXECUTION_DONE
#endif

  enum {
    NOT_LAUNCHED_YET = 1,
    EXECUTION_DONE = 2,
  };


  typedef boost::shared_ptr< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> const> ConstPtr;

}; // struct PxrdStatus_

typedef ::pxrd_msgs::PxrdStatus_<std::allocator<void> > PxrdStatus;

typedef boost::shared_ptr< ::pxrd_msgs::PxrdStatus > PxrdStatusPtr;
typedef boost::shared_ptr< ::pxrd_msgs::PxrdStatus const> PxrdStatusConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pxrd_msgs::PxrdStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pxrd_msgs::PxrdStatus_<ContainerAllocator1> & lhs, const ::pxrd_msgs::PxrdStatus_<ContainerAllocator2> & rhs)
{
  return lhs.pxrd_status == rhs.pxrd_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pxrd_msgs::PxrdStatus_<ContainerAllocator1> & lhs, const ::pxrd_msgs::PxrdStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pxrd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b92491773d58c099e9d91e9c34f664b0";
  }

  static const char* value(const ::pxrd_msgs::PxrdStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb92491773d58c099ULL;
  static const uint64_t static_value2 = 0xe9d91e9c34f664b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pxrd_msgs/PxrdStatus";
  }

  static const char* value(const ::pxrd_msgs::PxrdStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 NOT_LAUNCHED_YET = 1\n"
"int32 EXECUTION_DONE = 2\n"
"\n"
"int32 pxrd_status\n"
;
  }

  static const char* value(const ::pxrd_msgs::PxrdStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pxrd_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PxrdStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pxrd_msgs::PxrdStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pxrd_msgs::PxrdStatus_<ContainerAllocator>& v)
  {
    s << indent << "pxrd_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pxrd_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PXRD_MSGS_MESSAGE_PXRDSTATUS_H
